#!/usr/bin/env node
/* eslint-disable no-console */
/* Generate todo.config.js */

const fs = require("fs");
const path = require("path");

module.paths.push(path.join(__dirname, "plugin", "node_modules"));

let ESLint;
try {
    // eslint-disable-next-line global-require
    ESLint = require("eslint").ESLint;
} catch (e) {
    if (e.code === "MODULE_NOT_FOUND") {
        console.error("Could not load the 'eslint' package.");
        console.error("Please run 'npm install' inside the eslint/plugin/ directory first.");
    } else {
        console.error(e);
    }
    process.exit(1);
}

/** Given a mapping from ruleId to its number of occurrences,
 * return an array of `[ruleId, occurrences]` pairs sorted by
 * the number of occurrences in descending order.
 */
function sortedStats(stats) {
    return Object.entries(stats).sort(([aKey, aVal], [bKey, bVal]) => {
        if (aVal !== bVal) {
            return bVal - aVal;
        }
        return aKey.localeCompare(bKey);
    });
}

const TIDDLYWIKI_RULES = new Set([
    "func-args-comma-spacing"
]);

function formatStat([ruleId, count]) {
    let docUrl;
    if (TIDDLYWIKI_RULES.has(ruleId)) {
        docUrl = `./plugin/docs/rules/${ruleId}.md`;
    } else {
        docUrl = `https://eslint.org/docs/rules/${ruleId}`;
    }
    return `${ruleId}: ${count} - ${docUrl}`;
}

function indent(count, str) {
    return " ".repeat(count) + str;
}

// ESLint itself only supports node >= 10, so we allow ES6+ syntax like
// async and const.
(async function main() {
    process.env.ESLINT_NO_TODO = "1";
    const eslint = new ESLint({
        rulePaths: [
            path.join(__dirname, "./plugin/lib/rules")
        ],
        resolvePluginsRelativeTo: path.join(__dirname, "plugin", "node_modules"),
        useEslintrc: true
    });
    const rootDir = path.dirname(__dirname);
    const results = await eslint.lintFiles([path.join(rootDir, "**", "*.js")]);
    const globalStats = {};
    const rulesToIgnore = []; // Array.<Array<result, ruleStats>>
    const filesToIgnore = []; // Array.<Array<result, fatalMessages>>
    results.forEach((result) => {
        const fatalMessages = [];
        const fileStats = {};
        result.messages.forEach((msg) => {
            if (msg.fatal) {
                fatalMessages.push(msg);
            } else {
                fileStats[msg.ruleId] = (fileStats[msg.ruleId] || 0) + 1;
                globalStats[msg.ruleId] = (globalStats[msg.ruleId] || 0) + 1;
            }
        });
        if (Object.keys(fileStats).length > 0) {
            const sortedFileStats = sortedStats(fileStats);
            rulesToIgnore.push([result, sortedFileStats]);
        } else if (fatalMessages.length > 0) {
            filesToIgnore.push([result, fatalMessages]);
        }
    });
    const outputPath = path.join(__dirname, "todo.config.js");
    await fs.open(outputPath, "w", (err, fd) => {
        if (err) {
            throw err;
        }
        fs.writeSync(fd, `// Auto-generated by eslint/gen-todo.js on ${new Date().toUTCString()}\n`);
        fs.writeSync(fd, `/* eslint-disable max-len, quote-props */

/**
  This file holds ESLint rules to ignore for specific files in the code base.
  There really should be none, but if there are, it means we're working on fixing
  them (likely because we introduced new rules), and you're welcome to help out.

  ## How to work on these todos:

  1. Pick a file to work on. You can see linter errors or warnings for a specific
     file by doing:

     $ ESLINT_NO_TODO=1 bin/lint.sh path/to/file.js

  2. Fix linter issues. This can be done by either editing the file or
     adjusting the relevant rule by editing ./base.config.js.

     If the file is from an external source and we don't expect to make changes
     other than replacing it entirely with a newer version, add it to the
     \`ignorePatterns\` of ./base.config.js.

     If a file really should be exempt from a certain rule, you can disable the
     rule for that file by adding a comment like "eslint-disable [rule-id-here]",
     just like the one at the top of this file. Read more about configuring ESLint
     with comments here:
     https://eslint.org/docs/user-guide/configuring#disabling-rules-with-inline-comments

  3. Run \`node eslint/gen-todo.js\` and confirm the file or the specific rule
     for the file you were working on has been removed from \`overrides\` below.
     Ideally, there should be no new additions to the \`overrides\` array.

  4. Confirm the linter is happy by running \`bin/lint.sh\`. There will be no
     output from the command if there are no issues.

  5. Make a PR.
`);

        if (Object.keys(globalStats).length > 0) {
            const formattedGlobalStats = sortedStats(globalStats)
                .map((stat) => `   * ${formatStat(stat)}`)
                .join("\n");
            fs.writeSync(fd, `
  ## List of all ESLint rules that are disabled below

  Note: counts are from the time this file was generated and may not be accurate.

${formattedGlobalStats}
`);
        }

        fs.writeSync(fd, `
 */
module.exports = process.env.ESLINT_NO_TODO === "1" ? {} : {
    "overrides": [
`);
        rulesToIgnore.forEach(([result, stats]) => {
            const relPath = path.relative(rootDir, result.filePath);
            // Not using JSON.stringify() in order to be able to comment with the number of occurrences.
            fs.writeSync(fd, indent(8, "{\n"));
            fs.writeSync(fd, indent(12, `"files": [${JSON.stringify(relPath)}],\n`));
            fs.writeSync(fd, indent(12, "\"rules\": {\n"));
            stats.forEach(([ruleId, count]) => {
                fs.writeSync(fd, indent(16, `"${ruleId}": "off", // Count: ${count}\n`));
            });
            fs.writeSync(fd, indent(12, "}\n"));
            fs.writeSync(fd, indent(8, "},\n"));
        });
        fs.writeSync(fd, `    ],
    "ignorePatterns": [
`);
        filesToIgnore.forEach(([result, fatalMessages]) => {
            const relPath = path.relative(rootDir, result.filePath);
            const comment = fatalMessages.map((msg) => msg.message).join(", ");
            fs.writeSync(fd, indent(8, `${JSON.stringify(relPath)}, // Fatal: ${comment}\n`));
        });
        fs.writeSync(fd, `    ],
};
`);
    });
    const formatter = await eslint.loadFormatter("stylish");
    const resultText = formatter.format(results);
    console.log(resultText);
    console.log("Updated", outputPath, "to ignore these rules.");
}()).catch((error) => {
    process.exitCode = 1;
    console.error(error);
});
